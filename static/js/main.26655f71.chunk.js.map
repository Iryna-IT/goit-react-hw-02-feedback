{"version":3,"sources":["components/Section/Section.jsx","components/FedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/App.jsx","index.js"],"names":["Section","heading","children","className","FeedbackOptions","options","onLeaveFeedback","classes","classNames","bind","styles","map","option","type","value","onClick","shortId","generate","Notification","message","Statistics","good","bad","neutral","total","positivePercentage","App","state","handleFeedback","event","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","positiveFeedback","totalFeedback","Math","round","this","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAqBeA,EAdC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAExB,OACI,oCACI,oBAAIC,UAAU,GAAd,SAAkBF,IACjBC,M,iDCwBEE,EAZS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAC1BC,EAAUC,IAAWC,KAAKC,KAChC,OAAQL,EAAQM,KAAI,SAACC,GAAD,OAChB,wBAAiCT,UAAWI,EAAQ,MAAD,UAAWK,IAAWC,KAAK,SAASC,MAAOF,EAAQG,QAAST,EAA/G,SAAiIM,GAApHI,IAAQC,gBCVdC,G,MAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,sBAAKhB,UAAU,eAAf,cAAgCgB,EAAhC,SCqBOC,EAxBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAE7C,OAEc,IAAVD,EACI,gCACI,wCAAU,qCAAQH,QAClB,2CAAa,+BAAOE,IAApB,OACA,uCAAS,+BAAOD,OAChB,yCAAW,+BAAOE,OAClB,qDAAuB,iCAAOC,EAAP,aAEzB,cAAC,EAAD,CAAcN,QAAU,uBCRhCO,G,kNACJC,MAAQ,CACNN,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAMPM,eAAiB,SAACC,GAChB,IAAMjB,EAASiB,EAAMC,OAAOhB,MAC5B,EAAKiB,UAAS,SAACC,GAAD,sBAAmBpB,EAASoB,EAAUpB,GAAU,O,EAIhEqB,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBN,KADiB,EACXE,QADW,EACFD,K,EAIzBY,gCAAkC,WAChC,IAAMC,EAAmB,EAAKR,MAAMN,KAC9Be,EAAgB,EAAKH,qBAC3B,OAAOI,KAAKC,MAAOH,EAAmBC,EAAiB,M,4CAIzD,WACE,OACE,sBAAKjC,UAAU,MAAf,UACE,cAAC,EAAD,CAASF,QAAQ,wBAAjB,SACE,cAAC,EAAD,CAAiBI,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBAAiBiC,KAAKX,mBAE9E,cAAC,EAAD,CAAS3B,QAAQ,aAAjB,SACE,cAAC,EAAD,CAAYoB,KAAMkB,KAAKZ,MAAMN,KAAME,QAASgB,KAAKZ,MAAMJ,QAASD,IAAKiB,KAAKZ,MAAML,IAAKE,MAAOe,KAAKN,qBAAsBR,mBAAoBc,KAAKL,6C,GAnCxIM,cAAZd,EAOGe,aAAe,GAmCTf,Q,MC3CfgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.26655f71.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n// import {useStyles} from './TransactionHistory.style';\r\n\r\nconst Section = ({ heading, children }) => {\r\n//   const classes = useStyles();\r\n    return (\r\n        <section>\r\n            <h1 className=''>{heading}</h1>\r\n            {children}\r\n        </section>\r\n    );\r\n};\r\n\r\n// Section.propTypes = {\r\n//   heading: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default Section;","// import PropTypes from 'prop-types';\r\n// import { useStyles } from './FeedbackOptions.style';\r\n// import shortId from 'shortid';\r\n// // import classNames from 'classnames';\r\n\r\n// const FeedbackOptions = ({ options, onLeaveFeedback}) => {\r\n//     const classes = useStyles();\r\n//     return (options.map((option) => \r\n//         <button key={shortId.generate()} className={classes.btn} type=\"button\" value={option} onClick={onLeaveFeedback}>{option}</button>\r\n// ))\r\n// }\r\n\r\n\r\n// FeedbackOptions.propTypes = {\r\n//     options: PropTypes.arrayOf(PropTypes.string),\r\n//     onLeaveFeedback: PropTypes.func.isRequired,\r\n// };\r\n// export default FeedbackOptions;\r\n\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.css';\r\nimport shortId from 'shortid';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback}) => {\r\n    const classes = classNames.bind(styles);\r\n    return (options.map((option) => \r\n        <button key={shortId.generate()} className={classes('btn', `${option}`)} type=\"button\" value={option} onClick={onLeaveFeedback}>{option}</button>\r\n))\r\n}\r\n\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string),\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nimport './Notification.css';\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <div className='notification'> {message} </div>\r\n    );\r\n};\r\n\r\n// Notification.propTypes = {\r\n//   message: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default Notification;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Notification from '../Notification/Notification';\r\n// import {useStyles} from './TransactionHistory.style';\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\r\n    //   const classes = useStyles();\r\n    return (\r\n        // <div className={classes.tr}>\r\n        total !== 0  ?\r\n            < div >\r\n                <p> Good: <span> {good}</span></p>\r\n                <p> Neutral: <span>{neutral}</span> </p>\r\n                <p> Bad: <span>{bad}</span></p>\r\n                <p> Total: <span>{total}</span></p>\r\n                <p> Positive feddback: <span>{positivePercentage}%</span></p>\r\n            </div >\r\n            : <Notification message = \"No feedback given\" ></Notification>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number,\r\n  \r\n};\r\nexport default Statistics;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Section from '../components/Section';\nimport FeedbackOptions from '../components/FedbackOptions';\nimport Statistics from '../components/Statistics';\n\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  static defaultProps = {};\n  static propTypes = {};\n\n  handleFeedback = (event) => {\n    const option = event.target.value;\n    this.setState((prevState) => ({ [option]: prevState[option] + 1 }));\n  }\n  \n \n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad\n  };\n  \n  countPositiveFeedbackPercentage = () => {\n    const positiveFeedback = this.state.good;\n    const totalFeedback = this.countTotalFeedback();\n    return Math.round((positiveFeedback / totalFeedback) * 100)\n  };\n\n\n  render() {\n    return (\n      <div className='app'>\n        <Section heading=\"Please leave feedback\">\n          <FeedbackOptions options={['good', 'neutral', 'bad']} onLeaveFeedback={this.handleFeedback}></FeedbackOptions>\n        </Section>\n        <Section heading=\"Statistics\">\n          <Statistics good={this.state.good} neutral={this.state.neutral} bad={this.state.bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()}></Statistics>\n        </Section>\n      </div>\n    )\n  }\n }\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport 'modern-normalize';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}